// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// GetWallpaperParams is parameters of getWallpaper operation.
type GetWallpaperParams struct {
	ID ID
}

func unpackGetWallpaperParams(packed middleware.Parameters) (params GetWallpaperParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(ID)
	}
	return params
}

func decodeGetWallpaperParams(args [1]string, argsEscaped bool, r *http.Request) (params GetWallpaperParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ID = ID(paramsDotIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetWallpapersParams is parameters of getWallpapers operation.
type GetWallpapersParams struct {
	Limit          OptInt
	StartAfterDate OptDate
	StartAfterID   OptID
	Prev           OptGetWallpapersPrev
}

func unpackGetWallpapersParams(packed middleware.Parameters) (params GetWallpapersParams) {
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "startAfterDate",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.StartAfterDate = v.(OptDate)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "startAfterID",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.StartAfterID = v.(OptID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prev",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Prev = v.(OptGetWallpapersPrev)
		}
	}
	return params
}

func decodeGetWallpapersParams(args [0]string, argsEscaped bool, r *http.Request) (params GetWallpapersParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           24,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: startAfterDate.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "startAfterDate",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartAfterDateVal Date
				if err := func() error {
					var paramsDotStartAfterDateValVal int
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToInt(val)
						if err != nil {
							return err
						}

						paramsDotStartAfterDateValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotStartAfterDateVal = Date(paramsDotStartAfterDateValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.StartAfterDate.SetTo(paramsDotStartAfterDateVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.StartAfterDate.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "startAfterDate",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: startAfterID.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "startAfterID",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartAfterIDVal ID
				if err := func() error {
					var paramsDotStartAfterIDValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotStartAfterIDValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotStartAfterIDVal = ID(paramsDotStartAfterIDValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.StartAfterID.SetTo(paramsDotStartAfterIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "startAfterID",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prev.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prev",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPrevVal GetWallpapersPrev
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPrevVal = GetWallpapersPrev(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Prev.SetTo(paramsDotPrevVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Prev.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prev",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetWallpapersByTagParams is parameters of getWallpapersByTag operation.
type GetWallpapersByTagParams struct {
	Tag   string
	After OptFloat64
}

func unpackGetWallpapersByTagParams(packed middleware.Parameters) (params GetWallpapersByTagParams) {
	{
		key := middleware.ParameterKey{
			Name: "tag",
			In:   "path",
		}
		params.Tag = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "after",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.After = v.(OptFloat64)
		}
	}
	return params
}

func decodeGetWallpapersByTagParams(args [1]string, argsEscaped bool, r *http.Request) (params GetWallpapersByTagParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: tag.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tag",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Tag = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tag",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: after.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "after",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAfterVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					paramsDotAfterVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.After.SetTo(paramsDotAfterVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.After.Get(); ok {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(value)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "after",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
