// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// GetRoot implements getRoot operation.
	//
	// GET /
	GetRoot(ctx context.Context) error
	// GetWallpaper implements getWallpaper operation.
	//
	// Returns a wallpaper with the given ID.
	//
	// GET /wallpapers/{id}
	GetWallpaper(ctx context.Context, params GetWallpaperParams) (GetWallpaperRes, error)
	// GetWallpaperTags implements getWallpaperTags operation.
	//
	// Returns a list of tags.
	//
	// GET /wallpapers/tags
	GetWallpaperTags(ctx context.Context) (GetWallpaperTagsRes, error)
	// GetWallpapers implements getWallpapers operation.
	//
	// Returns a list of wallpapers.
	//
	// GET /wallpapers
	GetWallpapers(ctx context.Context, params GetWallpapersParams) (GetWallpapersRes, error)
	// GetWallpapersByTag implements getWallpapersByTag operation.
	//
	// Returns a list of wallpapers with the given tag.
	//
	// GET /wallpapers/tags/{tag}
	GetWallpapersByTag(ctx context.Context, params GetWallpapersByTagParams) (GetWallpapersByTagRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
