// Code generated by ogen, DO NOT EDIT.

package api

type Date int

// GetRootOK is response for GetRoot operation.
type GetRootOK struct{}

// GetWallpaperNotFound is response for GetWallpaper operation.
type GetWallpaperNotFound struct{}

func (*GetWallpaperNotFound) getWallpaperRes() {}

// GetWallpaperTagsNotFound is response for GetWallpaperTags operation.
type GetWallpaperTagsNotFound struct{}

func (*GetWallpaperTagsNotFound) getWallpaperTagsRes() {}

type GetWallpaperTagsOK map[string]int

func (s *GetWallpaperTagsOK) init() GetWallpaperTagsOK {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

func (*GetWallpaperTagsOK) getWallpaperTagsRes() {}

// GetWallpapersByTagNotFound is response for GetWallpapersByTag operation.
type GetWallpapersByTagNotFound struct{}

func (*GetWallpapersByTagNotFound) getWallpapersByTagRes() {}

// GetWallpapersNotFound is response for GetWallpapers operation.
type GetWallpapersNotFound struct{}

func (*GetWallpapersNotFound) getWallpapersRes() {}

type GetWallpapersPrev int

const (
	GetWallpapersPrev1 GetWallpapersPrev = 1
)

// AllValues returns all GetWallpapersPrev values.
func (GetWallpapersPrev) AllValues() []GetWallpapersPrev {
	return []GetWallpapersPrev{
		GetWallpapersPrev1,
	}
}

type ID string

// Ref: #/components/schemas/Links
type Links struct {
	Prev OptString `json:"prev"`
	Next OptString `json:"next"`
}

// GetPrev returns the value of Prev.
func (s *Links) GetPrev() OptString {
	return s.Prev
}

// GetNext returns the value of Next.
func (s *Links) GetNext() OptString {
	return s.Next
}

// SetPrev sets the value of Prev.
func (s *Links) SetPrev(val OptString) {
	s.Prev = val
}

// SetNext sets the value of Next.
func (s *Links) SetNext(val OptString) {
	s.Next = val
}

// NewOptDate returns new OptDate with value set to v.
func NewOptDate(v Date) OptDate {
	return OptDate{
		Value: v,
		Set:   true,
	}
}

// OptDate is optional Date.
type OptDate struct {
	Value Date
	Set   bool
}

// IsSet returns true if OptDate was set.
func (o OptDate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDate) Reset() {
	var v Date
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDate) SetTo(v Date) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDate) Get() (v Date, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDate) Or(d Date) Date {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetWallpapersPrev returns new OptGetWallpapersPrev with value set to v.
func NewOptGetWallpapersPrev(v GetWallpapersPrev) OptGetWallpapersPrev {
	return OptGetWallpapersPrev{
		Value: v,
		Set:   true,
	}
}

// OptGetWallpapersPrev is optional GetWallpapersPrev.
type OptGetWallpapersPrev struct {
	Value GetWallpapersPrev
	Set   bool
}

// IsSet returns true if OptGetWallpapersPrev was set.
func (o OptGetWallpapersPrev) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetWallpapersPrev) Reset() {
	var v GetWallpapersPrev
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetWallpapersPrev) SetTo(v GetWallpapersPrev) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetWallpapersPrev) Get() (v GetWallpapersPrev, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetWallpapersPrev) Or(d GetWallpapersPrev) GetWallpapersPrev {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptID returns new OptID with value set to v.
func NewOptID(v ID) OptID {
	return OptID{
		Value: v,
		Set:   true,
	}
}

// OptID is optional ID.
type OptID struct {
	Value ID
	Set   bool
}

// IsSet returns true if OptID was set.
func (o OptID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptID) Reset() {
	var v ID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptID) SetTo(v ID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptID) Get() (v ID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptID) Or(d ID) ID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Wallpaper
type Wallpaper struct {
	ID        ID     `json:"id"`
	Title     string `json:"title"`
	Copyright string `json:"copyright"`
	Date      Date   `json:"date"`
	Filename  string `json:"filename"`
	Market    string `json:"market"`
}

// GetID returns the value of ID.
func (s *Wallpaper) GetID() ID {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *Wallpaper) GetTitle() string {
	return s.Title
}

// GetCopyright returns the value of Copyright.
func (s *Wallpaper) GetCopyright() string {
	return s.Copyright
}

// GetDate returns the value of Date.
func (s *Wallpaper) GetDate() Date {
	return s.Date
}

// GetFilename returns the value of Filename.
func (s *Wallpaper) GetFilename() string {
	return s.Filename
}

// GetMarket returns the value of Market.
func (s *Wallpaper) GetMarket() string {
	return s.Market
}

// SetID sets the value of ID.
func (s *Wallpaper) SetID(val ID) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *Wallpaper) SetTitle(val string) {
	s.Title = val
}

// SetCopyright sets the value of Copyright.
func (s *Wallpaper) SetCopyright(val string) {
	s.Copyright = val
}

// SetDate sets the value of Date.
func (s *Wallpaper) SetDate(val Date) {
	s.Date = val
}

// SetFilename sets the value of Filename.
func (s *Wallpaper) SetFilename(val string) {
	s.Filename = val
}

// SetMarket sets the value of Market.
func (s *Wallpaper) SetMarket(val string) {
	s.Market = val
}

// Ref: #/components/schemas/WallpaperList
type WallpaperList struct {
	Data  []Wallpaper `json:"data"`
	Links Links       `json:"links"`
}

// GetData returns the value of Data.
func (s *WallpaperList) GetData() []Wallpaper {
	return s.Data
}

// GetLinks returns the value of Links.
func (s *WallpaperList) GetLinks() Links {
	return s.Links
}

// SetData sets the value of Data.
func (s *WallpaperList) SetData(val []Wallpaper) {
	s.Data = val
}

// SetLinks sets the value of Links.
func (s *WallpaperList) SetLinks(val Links) {
	s.Links = val
}

func (*WallpaperList) getWallpapersByTagRes() {}
func (*WallpaperList) getWallpapersRes()      {}

// Merged schema.
// Ref: #/components/schemas/WallpaperWithTags
type WallpaperWithTags struct {
	ID        ID                    `json:"id"`
	Title     string                `json:"title"`
	Copyright string                `json:"copyright"`
	Date      Date                  `json:"date"`
	Filename  string                `json:"filename"`
	Market    string                `json:"market"`
	Tags      WallpaperWithTagsTags `json:"tags"`
}

// GetID returns the value of ID.
func (s *WallpaperWithTags) GetID() ID {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *WallpaperWithTags) GetTitle() string {
	return s.Title
}

// GetCopyright returns the value of Copyright.
func (s *WallpaperWithTags) GetCopyright() string {
	return s.Copyright
}

// GetDate returns the value of Date.
func (s *WallpaperWithTags) GetDate() Date {
	return s.Date
}

// GetFilename returns the value of Filename.
func (s *WallpaperWithTags) GetFilename() string {
	return s.Filename
}

// GetMarket returns the value of Market.
func (s *WallpaperWithTags) GetMarket() string {
	return s.Market
}

// GetTags returns the value of Tags.
func (s *WallpaperWithTags) GetTags() WallpaperWithTagsTags {
	return s.Tags
}

// SetID sets the value of ID.
func (s *WallpaperWithTags) SetID(val ID) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *WallpaperWithTags) SetTitle(val string) {
	s.Title = val
}

// SetCopyright sets the value of Copyright.
func (s *WallpaperWithTags) SetCopyright(val string) {
	s.Copyright = val
}

// SetDate sets the value of Date.
func (s *WallpaperWithTags) SetDate(val Date) {
	s.Date = val
}

// SetFilename sets the value of Filename.
func (s *WallpaperWithTags) SetFilename(val string) {
	s.Filename = val
}

// SetMarket sets the value of Market.
func (s *WallpaperWithTags) SetMarket(val string) {
	s.Market = val
}

// SetTags sets the value of Tags.
func (s *WallpaperWithTags) SetTags(val WallpaperWithTagsTags) {
	s.Tags = val
}

func (*WallpaperWithTags) getWallpaperRes() {}

type WallpaperWithTagsTags map[string]float32

func (s *WallpaperWithTagsTags) init() WallpaperWithTagsTags {
	m := *s
	if m == nil {
		m = map[string]float32{}
		*s = m
	}
	return m
}
